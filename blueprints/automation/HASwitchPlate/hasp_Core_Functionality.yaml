blueprint:
  name: HASP Core functionality
  description: '

    # Description


    Provides core HASP functionality. Deploy one copy of this blueprint for each HASP
    device.


    ![Preview](https://raw.githubusercontent.com/HASwitchPlate/Blueprints/main/images/hasp_Core_Functionality.png)


    ## HASP Font reference


    <details>


    The blueprint below allows you to select a font for each of the three page buttons.  This
    text section provides some information about the HASP fonts and how to use them.  Different
    blueprints might offer additional information in collapsible sections like this.


    The Nextion display supports monospaced and proportional fonts.  For monospace
    fonts, the HASP project includes [Consolas](https://docs.microsoft.com/en-us/typography/font-list/consolas)
    in 4 sizes and [Webdings](https://en.wikipedia.org/wiki/Webdings#Character_set)
    in 1 size.


    | Number | Font              | Characters per line | Lines per button |

    |--------|-------------------|---------------------|------------------|

    | 0      | Consolas 24 point | 20 characters       | 2 lines          |

    | 1      | Consolas 32 point | 15 characters       | 2 lines          |

    | 2      | Consolas 48 point | 10 characters       | 1 lines          |

    | 3      | Consolas 80 point | 6 characters        | 1 lines          |

    | 4      | Webdings 56 point | 8 characters        | 1 lines          |


    The HASP also includes [Google''s "Noto Sans"](https://github.com/googlefonts/noto-fonts)
    proportional font in 5 sizes.


    | Number | Font                       |

    |--------|----------------------------|

    | 5      | Noto Sans Regular 24 point |

    | 6      | Noto Sans Regular 32 point |

    | 7      | Noto Sans Regular 48 point |

    | 8      | Noto Sans Regular 64 point |

    | 9      | Noto Sans Regular 80 point |

    | 10     | Noto Sans Bold 80 point    |


    ### Icons


    Fonts 5-10 also include [1400+ icons which you can copy and paste from here](https://htmlpreview.github.io/?https://github.com/aderusha/HASwitchPlate/blob/master/Documentation/Images/hasp-fontawesome5.html)


    ### Font examples


    ![HASP Fonts 0-3](https://raw.githubusercontent.com/HASwitchPlate/Blueprints/main/images/NextionUI_Fonts_0-3.png)
    ![HASP Fonts 4-7](https://raw.githubusercontent.com/HASwitchPlate/Blueprints/main/images/NextionUI_Fonts_4-7.png)
    ![HASP Fonts 8-10](https://raw.githubusercontent.com/HASwitchPlate/Blueprints/main/images/NextionUI_Fonts_8-10.png)


    </details>

    '
  source_url: https://github.com/HASwitchPlate/Blueprints/blob/main/hasp_Core_Functionality.yaml
  domain: automation
  input:
    haspconnected:
      name: HASP Device
      description: Select the HASP device
      selector:
        entity:
          integration: mqtt
          domain: binary_sensor
          device_class: connectivity
    page1text:
      name: Page select button 1 text
      description: 'Enter text to appear on the left-most page select button #1.  It''s
        a small button, so keep it short.  6 character (or shorter) words are crisp
        and legible.'
      default: Page 1
      selector:
        text: {}
    page1font:
      name: Page select button 1 font
      description: 'Select the font for page select button #1.  Font 6 might be a
        good starting point.  You can refer to the HASP Font reference above to see
        available options.'
      default: 6
      selector:
        number:
          min: 0.0
          max: 10.0
          mode: slider
          step: 1.0
    page1page:
      name: Page select button 1 page
      description: 'Select the destination page for page select button #1.  When you
        click the left-most page button on the HASP, the HASP will flip to the page
        number you select here.  If this is your first time here, try page 1.'
      default: 1
      selector:
        number:
          min: 0.0
          max: 11.0
          mode: slider
          step: 1.0
    page2text:
      name: Page select button 2 text
      description: 'Enter text to appear on the center page select button #2. If page
        scrolling is enabled, use the Page Names list below.'
      default: Page 2
      selector:
        text: {}
    page2font:
      name: Page select button 2 font
      description: 'Select the font for page select button #2.'
      default: 6
      selector:
        number:
          min: 0.0
          max: 10.0
          mode: slider
          step: 1.0
    page2page:
      name: Page select button 2 page
      description: 'Select the destination page for page select button #2'
      default: 2
      selector:
        number:
          min: 0.0
          max: 11.0
          mode: slider
          step: 1.0
    page3text:
      name: Page select button 3 text
      description: 'Enter text to appear on the right-most page select button #3'
      default: Page 3
      selector:
        text: {}
    page3font:
      name: Page select button 3 font
      description: 'Select the font for page select button #3'
      default: 6
      selector:
        number:
          min: 0.0
          max: 10.0
          mode: slider
          step: 1.0
    page3page:
      name: Page select button 3 page
      description: 'Select the destination page for page select button #3'
      default: 3
      selector:
        number:
          min: 0.0
          max: 11.0
          mode: slider
          step: 1.0
    page_scroll:
      name: Enable page scrolling instead of page select
      description: If enabled, page buttons 1 and 3 will scroll up and down through
        available pages. The middle page button 2 will continue to select its assigned
        page number, but the label for page button 2 will be determined based on the
        Page Names defined below.
      default: false
      selector:
        boolean: {}
    page_scroll_list:
      name: Page scroll list
      description: If page scrolling is enabled, set this list to include all active
        pages eligible for scrolling in the desired order. If a page is not being
        used, remove it from the list to skip it while scrolling up/down.
      default: 1,2,3,4,5,6,7,8,9,10,11
      selector:
        text: {}
    page_names:
      name: Page names
      description: If page scrolling is enabled, the list here assigns the label seen
        on Page Button 2 for each page.  For example, if "page9" is set to "HVAC",
        when page 9 is selected the text "HVAC" will appear on the middle page select
        button.  If you prefer one single label for the page2 button on all pages,
        simply set each page to the same value.
      default:
        page0: Page 0
        page1: Page 1
        page2: Page 2
        page3: Page 3
        page4: Page 4
        page5: Page 5
        page6: Page 6
        page7: Page 7
        page8: Page 8
        page9: Page 9
        page10: Page 10
        page11: Page 11
      selector:
        object: {}
    show_lovelace:
      name: Show lovelace configuration notification
      description: Turn this on to have a ready-made entities card configuration presented
        when you click EXECUTE.  Toggle this back off once you've added the code to
        your dashboard.
      default: true
      selector:
        boolean: {}
    reset_hasp:
      name: First-time HASP setup or reset
      description: Turn this on if this is a brand-new HASP (or you'd like to reset
        some default theme settings). Turn it on, hit save, and click EXECUTE to setup
        your HASP.  After the first run you can toggle this back off.
      default: true
      selector:
        boolean: {}
mode: parallel
max_exceeded: silent
variables:
  haspconnected: !input 'haspconnected'
  page1text: !input 'page1text'
  page1font: !input 'page1font'
  page1page: !input 'page1page'
  page2text: !input 'page2text'
  page2font: !input 'page2font'
  page2page: !input 'page2page'
  page3text: !input 'page3text'
  page3font: !input 'page3font'
  page3page: !input 'page3page'
  page_scroll: !input 'page_scroll'
  page_scroll_list: !input 'page_scroll_list'
  page_names: !input 'page_names'
  show_lovelace: !input 'show_lovelace'
  reset_hasp: !input 'reset_hasp'
  haspname: '{{ haspconnected.split(".")[1].split("_connected")[0] }}'
  activepage: '{% set activepage_entity = "number." ~ haspname ~ "_active_page" %}{%
    if states(activepage_entity)|lower == "none" %}-1{% else %}{{ states(activepage_entity)
    | int }}{% endif %}'
  statustopic: '{{ "hasp/" ~ haspname ~ "/status" }}'
  commandtopic: '{{ "hasp/" ~ haspname ~ "/command/" ~ haspobject }}'
  jsontopic: '{{ "hasp/" ~ haspname ~ "/state/json" }}'
  jsoncommandtopic: '{{ "hasp/" ~ haspname ~ "/command/json" }}'
  haspsensor: '{{"sensor." ~ haspname ~ "_sensor"}}'
  haspIP: '{{state_attr(haspsensor, "haspIP")}}'
  haspClientId: '{{state_attr(haspsensor, "haspClientID")}}'
  haspMac: '{{state_attr(haspsensor, "haspMac")}}'
  haspManufacturer: '{{state_attr(haspsensor, "haspManufacturer")}}'
  haspModel: '{{state_attr(haspsensor, "haspModel")}}'
  sw_version: '{{state_attr(haspsensor, "espVersion")}}'
  default_selected_foreground_brightness: '1'
  default_selected_foreground_color: '[0, 0, 0]'
  default_selected_background_brightness: '255'
  default_selected_background_color: '[255, 255, 255]'
  default_unselected_foreground_brightness: '224'
  default_unselected_foreground_color: '[255, 255, 255]'
  default_unselected_background_brightness: '64'
  default_unselected_background_color: '[255, 255, 255]'
  selectedforegroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/selectedforegroundcolor/rgb"
    }}'
  selectedbackgroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/selectedbackgroundcolor/rgb"
    }}'
  unselectedforegroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedforegroundcolor/rgb"
    }}'
  unselectedbackgroundcolortopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedbackgroundcolor/rgb"
    }}'
  page_button_trigger: 'OFF'
  page_list: '{{page_scroll_list.split(",")}}'
  page_previous: "{%- set page = namespace() -%} {%- set page.previous = page_list[(page_list|length)-1]|int\
    \ -%} {%- set page.next = page_list[0]|int -%} {%- for item in page_list -%}\n\
    \  {%- if item|int == activepage -%}\n    {%- if not loop.first -%}\n      {%-\
    \ set page.previous = loop.previtem|int -%}\n    {%- endif -%}\n    {%- if not\
    \ loop.last -%}\n      {%- set page.next = loop.nextitem|int -%}\n    {%- endif\
    \ -%}\n  {%- endif -%}\n{%- endfor -%}{{page.previous}}\n"
  page_next: "{%- set page = namespace() -%} {%- set page.previous = page_list[(page_list|length)-1]|int\
    \ -%} {%- set page.next = page_list[0]|int -%} {%- for item in page_list -%}\n\
    \  {%- if item|int == activepage -%}\n    {%- if not loop.first -%}\n      {%-\
    \ set page.previous = loop.previtem|int -%}\n    {%- endif -%}\n    {%- if not\
    \ loop.last -%}\n      {%- set page.next = loop.nextitem|int -%}\n    {%- endif\
    \ -%}\n  {%- endif -%}\n{%- endfor -%}{{page.next}}\n"
trigger:
- platform: state
  entity_id: !input 'haspconnected'
  to: 'on'
- platform: homeassistant
  event: start
- platform: mqtt
  topic: hasp/+/state/json
- platform: mqtt
  topic: hasp/+/light/selectedforegroundcolor/rgb
- platform: mqtt
  topic: hasp/+/light/selectedbackgroundcolor/rgb
- platform: mqtt
  topic: hasp/+/light/unselectedforegroundcolor/rgb
- platform: mqtt
  topic: hasp/+/light/unselectedbackgroundcolor/rgb
condition:
- condition: state
  entity_id: !input 'haspconnected'
  state: 'on'
action:
- choose:
  - conditions:
    - condition: template
      value_template: '{{ trigger is not defined }}'
    sequence:
    - service: mqtt.publish
      data:
        topic: homeassistant/light/{{haspname}}/selectedforegroundcolor/config
        payload: '{"name":"{{haspname}} selected foreground color", "command_topic":"hasp/{{haspname}}/light/selectedforegroundcolor/switch",
          "state_topic":"hasp/{{haspname}}/light/alwayson", "rgb_command_topic":"hasp/{{haspname}}/light/selectedforegroundcolor/rgb",
          "rgb_command_template": {% raw %}"{{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8)
          + (blue|bitwise_and(248)/8)|int }}",{% endraw %} "retain":false, "unique_id":"{{haspClientId}}-selectedforegroundcolor",
          "device":{"identifiers":["{{haspClientId}}"], "name":"{{haspname}}", "manufacturer":"{{haspManufacturer}}",
          "model":"{{haspModel}}", "sw_version":{{sw_version}} }}'
        retain: true
    - service: mqtt.publish
      data:
        topic: homeassistant/light/{{haspname}}/selectedbackgroundcolor/config
        payload: '{"name":"{{haspname}} selected background color", "command_topic":"hasp/{{haspname}}/light/selectedbackgroundcolor/switch",
          "state_topic":"hasp/{{haspname}}/light/alwayson", "rgb_command_topic":"hasp/{{haspname}}/light/selectedbackgroundcolor/rgb",
          "rgb_command_template": {% raw %}"{{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8)
          + (blue|bitwise_and(248)/8)|int }}",{% endraw %} "retain":false, "unique_id":"{{haspClientId}}-selectedbackgroundcolor",
          "device":{ "identifiers":["{{haspClientId}}"], "name":"{{haspname}}", "manufacturer":"{{haspManufacturer}}",
          "model":"{{haspModel}}", "sw_version":{{sw_version}} }}'
        retain: true
    - service: mqtt.publish
      data:
        topic: homeassistant/light/{{haspname}}/unselectedforegroundcolor/config
        payload: '{"name":"{{haspname}} unselected foreground color", "command_topic":"hasp/{{haspname}}/light/unselectedforegroundcolor/switch",
          "state_topic":"hasp/{{haspname}}/light/alwayson", "rgb_command_topic":"hasp/{{haspname}}/light/unselectedforegroundcolor/rgb",
          "rgb_command_template": {% raw %}"{{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8)
          + (blue|bitwise_and(248)/8)|int }}",{% endraw %} "retain":false, "unique_id":"{{haspClientId}}-unselectedforegroundcolor",
          "device":{"identifiers":["{{haspClientId}}"], "name":"{{haspname}}", "manufacturer":"{{haspManufacturer}}",
          "model":"{{haspModel}}", "sw_version":{{sw_version}} }}'
        retain: true
    - service: mqtt.publish
      data:
        topic: homeassistant/light/{{haspname}}/unselectedbackgroundcolor/config
        payload: '{"name":"{{haspname}} unselected background color", "command_topic":"hasp/{{haspname}}/light/unselectedbackgroundcolor/switch",
          "state_topic":"hasp/{{haspname}}/light/alwayson", "rgb_command_topic":"hasp/{{haspname}}/light/unselectedbackgroundcolor/rgb",
          "rgb_command_template": {% raw %}"{{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8)
          + (blue|bitwise_and(248)/8)|int }}",{% endraw %} "retain":false, "unique_id":"{{haspClientId}}-unselectedbackgroundcolor",
          "device":{"identifiers":["{{haspClientId}}"], "name":"{{haspname}}", "manufacturer":"{{haspManufacturer}}",
          "model":"{{haspModel}}", "sw_version":{{sw_version}} }}'
        retain: true
    - service: mqtt.publish
      data:
        topic: hasp/{{haspname}}/light/alwayson
        payload: 'ON'
        retain: true
    - service: mqtt.publish
      data:
        topic: '{{jsoncommandtopic}}'
        payload: '[{% for p in range(1,12) %}"p[{{p}}].b[1].font={{page1font}}","p[{{p}}].b[1].txt=\"{{page1text}}\"",{%
          endfor %} {% for p in range(1,12) %}"p[{{p}}].b[2].font={{page2font}}","p[{{p}}].b[2].txt=\"{%
          if page_scroll %}{{page_names.get("page" ~ p)}}{% else %}{{page2text}}{%
          endif %}\"",{% endfor %} {% for p in range(1,12) %}"p[{{p}}].b[3].font={{page3font}}","p[{{p}}].b[3].txt=\"{{page3text}}\""{%
          if not loop.last %},{% endif %}{% endfor %}]'
    - choose:
      - conditions:
        - condition: template
          value_template: '{{ show_lovelace }}'
        sequence:
        - service: persistent_notification.create
          data:
            title: '{{haspname}} Lovelace "Entities" Card'
            message: "To [create a Lovelace card](https://www.home-assistant.io/lovelace/)\
              \ to control HASP {{haspname}}, [create an Entities Card](https://www.home-assistant.io/lovelace/entities/),\
              \ select \"Show code editor\", and then paste in the code you see below.\n\
              ```yaml\n  type: entities\n  title: HASP {{haspname}}\n  show_header_toggle:\
              \ false\n  state_color: true\n  entities:\n    - entity: number.{{haspname}}_active_page\n\
              \    - type: divider\n    - entity: light.{{haspname}}_backlight\n \
              \     secondary_info: brightness\n    - type: divider\n    - entity:\
              \ light.{{haspname}}_selected_foreground_color\n      icon: 'mdi:palette'\n\
              \      name: Selected Foreground Color\n      secondary_info: brightness\n\
              \    - entity: light.{{haspname}}_selected_background_color\n      icon:\
              \ 'mdi:palette'\n      name: Selected Background Color\n      secondary_info:\
              \ brightness\n    - entity: light.{{haspname}}_unselected_foreground_color\n\
              \      icon: 'mdi:palette'\n      name: Unselected Foreground Color\n\
              \      secondary_info: brightness\n    - entity: light.{{haspname}}_unselected_background_color\n\
              \      icon: 'mdi:palette'\n      name: Unselected Background Color\n\
              \      secondary_info: brightness\n    - type: divider\n  footer:\n\
              \    type: buttons\n    entities:\n      - entity: {{haspsensor}}\n\
              \        name: Blueprints\n        icon: 'mdi:palette-swatch'\n    \
              \    tap_action:\n          action: navigate\n          navigation_path:\
              \ /config/blueprint/dashboard\n      - entity: {{haspsensor}}\n    \
              \    name: Automations\n        icon: 'mdi:robot'\n        tap_action:\n\
              \          action: navigate\n          navigation_path: /config/automation/dashboard\n\
              \      - entity: {{haspsensor}}\n        name: HASP Admin\n        icon:\
              \ 'mdi:cellphone-text'\n        tap_action:\n          action: url\n\
              \          url_path: http://{{haspIP}}\n```"
            notification_id: '{{haspname}} Lovelace Configuration'
    - choose:
      - conditions:
        - condition: template
          value_template: '{{ reset_hasp }}'
        sequence:
        - service: mqtt.publish
          data:
            topic: '{{jsoncommandtopic}}'
            payload: '["p[0].b[1].font=6","p[0].b[1].txt=\"    Setting up\\rHome
              Assistant\"","page 0"]'
        - service: mqtt.publish
          data:
            topic: hasp/{{haspname}}/state/page
            payload: '0'
        - service: light.turn_on
          data:
            entity_id: light.{{haspname}}_selected_foreground_color
            rgb_color: '{{default_selected_foreground_color}}'
        - service: light.turn_on
          data:
            entity_id: light.{{haspname}}_selected_foreground_color
            brightness: '{{default_selected_foreground_brightness}}'
        - service: light.turn_on
          data:
            entity_id: light.{{haspname}}_selected_background_color
            rgb_color: '{{default_selected_background_color}}'
        - service: light.turn_on
          data:
            entity_id: light.{{haspname}}_selected_background_color
            brightness: '{{default_selected_background_brightness}}'
        - service: light.turn_on
          data:
            entity_id: light.{{haspname}}_unselected_foreground_color
            rgb_color: '{{default_unselected_foreground_color}}'
        - service: light.turn_on
          data:
            entity_id: light.{{haspname}}_unselected_foreground_color
            brightness: '{{default_unselected_foreground_brightness}}'
        - service: light.turn_on
          data:
            entity_id: light.{{haspname}}_unselected_background_color
            rgb_color: '{{default_unselected_background_color}}'
        - service: light.turn_on
          data:
            entity_id: light.{{haspname}}_unselected_background_color
            brightness: '{{default_unselected_background_brightness}}'
        - service: mqtt.publish
          data:
            topic: hasp/{{haspname}}/command/reboot
            payload: ''
        - service: mqtt.publish
          data:
            topic: hasp/{{haspname}}/command/page
            payload: '{% if page_scroll %}{{page2page}}{% else %}{{page1page}}{% endif
              %}'
            retain: true
  - conditions:
    - condition: template
      value_template: '{{ trigger.platform == "state" and trigger.entity_id == haspconnected
        }}'
    sequence:
    - service: mqtt.publish
      data:
        topic: '{{jsoncommandtopic}}'
        payload: '[{% for p in range(1,12) %}"p[{{p}}].b[1].font={{page1font}}","p[{{p}}].b[1].txt=\"{{page1text}}\"",{%
          endfor %} {% for p in range(1,12) %}"p[{{p}}].b[2].font={{page2font}}","p[{{p}}].b[2].txt=\"{%
          if page_scroll %}{{page_names.get("page" ~ p)}}{% else %}{{page2text}}{%
          endif %}\"",{% endfor %} {% for p in range(1,12) %}"p[{{p}}].b[3].font={{page3font}}","p[{{p}}].b[3].txt=\"{{page3text}}\""{%
          if not loop.last %},{% endif %}{% endfor %}]'
    - service: mqtt.publish
      data:
        topic: '{{jsoncommandtopic}}'
        payload: '{%- set colorsource="light." ~ haspname ~ "_selected_foreground_color"
          -%} {%- set red=(state_attr(colorsource, "rgb_color")[0] * (state_attr(colorsource,
          "brightness") / 255))|int -%} {%- set green=(state_attr(colorsource, "rgb_color")[1]
          * (state_attr(colorsource, "brightness") / 255))|int -%} {%- set blue=(state_attr(colorsource,
          "rgb_color")[2] * (state_attr(colorsource, "brightness") / 255))|int -%}
          {%- set colorcode = (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8)
          + (blue|bitwise_and(248)/8)|int -%} [{%- if not page_scroll -%}{%- for p
          in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].pco={{colorcode}}"{%-
          else -%}"p[{{p}}].b[1].pco2={{colorcode}}"{%- endif -%},{%- endfor -%} {%-
          else -%}{%- for p in range(1,12) %}"p[{{p}}].b[1].pco2={{colorcode}}",{%-
          endfor -%}{%- endif -%} {%- for p in range(1,12) %}{%- if p == page2page|int
          %}"p[{{p}}].b[2].pco={{colorcode}}"{%- else -%}"p[{{p}}].b[2].pco2={{colorcode}}"{%-
          endif -%},{%- endfor -%} {%- if not page_scroll -%}{%- for p in range(1,12)
          %}{%- if p == page3page|int %}"p[{{p}}].b[3].pco={{colorcode}}"{%- else
          -%}"p[{{p}}].b[3].pco2={{colorcode}}"{%- endif -%}{% if not loop.last %},{%
          endif %}{%- endfor -%} {%- else -%}{%- for p in range(1,12) %}"p[{{p}}].b[3].pco2={{colorcode}}"{%
          if not loop.last %},{% endif %}{%- endfor -%}{%- endif -%}]'
    - service: mqtt.publish
      data:
        topic: '{{jsoncommandtopic}}'
        payload: '{%- set colorsource="light." ~ haspname ~ "_selected_background_color"
          -%} {%- set red=(state_attr(colorsource, "rgb_color")[0] * (state_attr(colorsource,
          "brightness") / 255))|int -%} {%- set green=(state_attr(colorsource, "rgb_color")[1]
          * (state_attr(colorsource, "brightness") / 255))|int -%} {%- set blue=(state_attr(colorsource,
          "rgb_color")[2] * (state_attr(colorsource, "brightness") / 255))|int -%}
          {%- set colorcode = (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8)
          + (blue|bitwise_and(248)/8)|int -%} [{%- if not page_scroll -%}{%- for p
          in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].bco={{colorcode}}"{%-
          else -%}"p[{{p}}].b[1].bco2={{colorcode}}"{%- endif -%},{%- endfor -%} {%
          else %}{%- for p in range(1,12) %}"p[{{p}}].b[1].bco2={{colorcode}}",{%-
          endfor -%}{%- endif -%} {%- for p in range(1,12) %}{%- if p == page2page|int
          %}"p[{{p}}].b[2].bco={{colorcode}}"{%- else -%}"p[{{p}}].b[2].bco2={{colorcode}}"{%-
          endif -%},{%- endfor -%} {%- if not page_scroll -%}{%- for p in range(1,12)
          %}{%- if p == page3page|int %}"p[{{p}}].b[3].bco={{colorcode}}"{%- else
          -%}"p[{{p}}].b[3].bco2={{colorcode}}"{%- endif -%}{% if not loop.last %},{%
          endif %}{%- endfor -%} {% else %}{%- for p in range(1,12) %}"p[{{p}}].b[3].bco2={{colorcode}}"{%
          if not loop.last %},{% endif %}{%- endfor -%}{%- endif -%}]'
    - service: mqtt.publish
      data:
        topic: '{{jsoncommandtopic}}'
        payload: '{%- set colorsource="light." ~ haspname ~ "_unselected_foreground_color"
          -%} {%- set red=(state_attr(colorsource, "rgb_color")[0] * (state_attr(colorsource,
          "brightness") / 255))|int -%} {%- set green=(state_attr(colorsource, "rgb_color")[1]
          * (state_attr(colorsource, "brightness") / 255))|int -%} {%- set blue=(state_attr(colorsource,
          "rgb_color")[2] * (state_attr(colorsource, "brightness") / 255))|int -%}
          {%- set colorcode = (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8)
          + (blue|bitwise_and(248)/8)|int -%} [{%- if not page_scroll -%}{%- for p
          in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].pco2={{colorcode}}"{%-
          else -%}"p[{{p}}].b[1].pco={{colorcode}}"{%- endif -%},{%- endfor -%} {%
          else %}{%- for p in range(1,12) %}"p[{{p}}].b[1].pco={{colorcode}}",{%-
          endfor -%}{%- endif -%} {%- for p in range(1,12) %}{%- if p == page2page|int
          %}"p[{{p}}].b[2].pco2={{colorcode}}"{%- else -%}"p[{{p}}].b[2].pco={{colorcode}}"{%-
          endif -%},{%- endfor -%} {%- if not page_scroll -%}{%- for p in range(1,12)
          %}{%- if p == page3page|int %}"p[{{p}}].b[3].pco2={{colorcode}}"{%- else
          -%}"p[{{p}}].b[3].pco={{colorcode}}"{%- endif -%}{% if not loop.last %},{%
          endif %}{%- endfor -%} {% else %}{%- for p in range(1,12) %}"p[{{p}}].b[3].pco={{colorcode}}"{%
          if not loop.last %},{% endif %}{%- endfor -%}{%- endif -%}]'
    - service: mqtt.publish
      data:
        topic: '{{jsoncommandtopic}}'
        payload: '{%- set colorsource="light." ~ haspname ~ "_unselected_background_color"
          -%} {%- set red=(state_attr(colorsource, "rgb_color")[0] * (state_attr(colorsource,
          "brightness") / 255))|int -%} {%- set green=(state_attr(colorsource, "rgb_color")[1]
          * (state_attr(colorsource, "brightness") / 255))|int -%} {%- set blue=(state_attr(colorsource,
          "rgb_color")[2] * (state_attr(colorsource, "brightness") / 255))|int -%}
          {%- set colorcode = (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8)
          + (blue|bitwise_and(248)/8)|int -%} [{%- if not page_scroll -%}{%- for p
          in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].bco2={{colorcode}}"{%-
          else -%}"p[{{p}}].b[1].bco={{colorcode}}"{%- endif -%},{%- endfor -%} {%
          else %}{%- for p in range(1,12) %}"p[{{p}}].b[1].bco={{colorcode}}",{%-
          endfor -%}{%- endif -%} {%- for p in range(1,12) %}{%- if p == page2page|int
          %}"p[{{p}}].b[2].bco2={{colorcode}}"{%- else -%}"p[{{p}}].b[2].bco={{colorcode}}"{%-
          endif -%},{%- endfor -%} {%- if not page_scroll -%}{%- for p in range(1,12)
          %}{%- if p == page3page|int %}"p[{{p}}].b[3].bco2={{colorcode}}"{%- else
          -%}"p[{{p}}].b[3].bco={{colorcode}}"{%- endif -%}{% if not loop.last %},{%
          endif %}{%- endfor -%} {% else %}{%- for p in range(1,12) %}"p[{{p}}].b[3].bco={{colorcode}}"{%
          if not loop.last %},{% endif %}{%- endfor -%}{%- endif -%}]'
    - service: mqtt.publish
      data:
        topic: hasp/{{haspname}}/command
        payload: ''
  - conditions:
    - condition: template
      value_template: '{{ trigger.platform == "mqtt" }}'
    sequence:
    - choose:
      - conditions:
        - condition: template
          value_template: '{{ (trigger.topic == jsontopic) and trigger.payload_json
            is defined }}'
        sequence:
        - choose:
          - conditions:
            - condition: template
              value_template: '{{ (trigger.payload_json.event | regex_match("p\[\d+\].b\[1\]"))
                and (trigger.payload_json.value == page_button_trigger) and not page_scroll}}'
            sequence:
            - service: mqtt.publish
              data:
                topic: hasp/{{haspname}}/command/page
                payload: !input 'page1page'
                retain: true
          - conditions:
            - condition: template
              value_template: '{{ (trigger.payload_json.event | regex_match("p\[\d+\].b\[1\]"))
                and (trigger.payload_json.value == page_button_trigger) and page_scroll}}'
            sequence:
            - service: mqtt.publish
              data:
                topic: hasp/{{haspname}}/command/page
                payload: '{{page_previous}}'
                retain: true
          - conditions:
            - condition: template
              value_template: '{{ (trigger.payload_json.event | regex_match("p\[\d+\].b\[2\]"))
                and (trigger.payload_json.value == page_button_trigger) }}'
            sequence:
            - service: mqtt.publish
              data:
                topic: hasp/{{haspname}}/command/page
                payload: !input 'page2page'
                retain: true
          - conditions:
            - condition: template
              value_template: '{{ (trigger.payload_json.event | regex_match("p\[\d+\].b\[3\]"))
                and (trigger.payload_json.value == page_button_trigger) and not page_scroll}}'
            sequence:
            - service: mqtt.publish
              data:
                topic: hasp/{{haspname}}/command/page
                payload: !input 'page3page'
                retain: true
          - conditions:
            - condition: template
              value_template: '{{ (trigger.payload_json.event | regex_match("p\[\d+\].b\[3\]"))
                and (trigger.payload_json.value == page_button_trigger) and page_scroll
                }}'
            sequence:
            - service: mqtt.publish
              data:
                topic: hasp/{{haspname}}/command/page
                payload: '{{page_next}}'
                retain: true
      - conditions:
        - condition: template
          value_template: '{{ trigger.topic == selectedforegroundcolortopic and not
            page_scroll }}'
        sequence:
        - service: mqtt.publish
          data:
            topic: '{{jsoncommandtopic}}'
            payload: '[{%- for p in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].pco={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[1].pco2={{trigger.payload}}"{%- endif -%},{%- endfor
              -%} {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].pco={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[2].pco2={{trigger.payload}}"{%- endif -%},{%- endfor
              -%} {%- for p in range(1,12) %}{%- if p == page3page|int %}"p[{{p}}].b[3].pco={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[3].pco2={{trigger.payload}}"{%- endif -%}{% if not
              loop.last %},{% endif %}{%- endfor -%}]'
      - conditions:
        - condition: template
          value_template: '{{ trigger.topic == selectedforegroundcolortopic and page_scroll
            }}'
        sequence:
        - service: mqtt.publish
          data:
            topic: '{{jsoncommandtopic}}'
            payload: '[{%- for p in range(1,12) %}"p[{{p}}].b[1].pco2={{trigger.payload}}",{%-
              endfor -%} {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].pco={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[2].pco2={{trigger.payload}}"{%- endif -%},{%- endfor
              -%} {%- for p in range(1,12) %}"p[{{p}}].b[3].pco2={{trigger.payload}}"{%
              if not loop.last %},{% endif %}{%- endfor -%}]'
      - conditions:
        - condition: template
          value_template: '{{ trigger.topic == selectedbackgroundcolortopic and not
            page_scroll }}'
        sequence:
        - service: mqtt.publish
          data:
            topic: '{{jsoncommandtopic}}'
            payload: '[{%- for p in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].bco={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[1].bco2={{trigger.payload}}"{%- endif -%},{%- endfor
              -%} {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].bco={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[2].bco2={{trigger.payload}}"{%- endif -%},{%- endfor
              -%} {%- for p in range(1,12) %}{%- if p == page3page|int %}"p[{{p}}].b[3].bco={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[3].bco2={{trigger.payload}}"{%- endif -%}{% if not
              loop.last %},{% endif %}{%- endfor -%}]'
      - conditions:
        - condition: template
          value_template: '{{ trigger.topic == selectedbackgroundcolortopic and page_scroll
            }}'
        sequence:
        - service: mqtt.publish
          data:
            topic: '{{jsoncommandtopic}}'
            payload: '[{%- for p in range(1,12) %}"p[{{p}}].b[1].bco2={{trigger.payload}}",{%-
              endfor -%} {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].bco={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[2].bco2={{trigger.payload}}"{%- endif -%},{%- endfor
              -%} {%- for p in range(1,12) %}"p[{{p}}].b[3].bco2={{trigger.payload}}"{%
              if not loop.last %},{% endif %}{%- endfor -%}]'
      - conditions:
        - condition: template
          value_template: '{{ trigger.topic == unselectedforegroundcolortopic and
            not page_scroll }}'
        sequence:
        - service: mqtt.publish
          data:
            topic: '{{jsoncommandtopic}}'
            payload: '[{%- for p in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].pco2={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[1].pco={{trigger.payload}}"{%- endif -%},{%- endfor
              -%} {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].pco2={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[2].pco={{trigger.payload}}"{%- endif -%},{%- endfor
              -%} {%- for p in range(1,12) %}{%- if p == page3page|int %}"p[{{p}}].b[3].pco2={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[3].pco={{trigger.payload}}"{%- endif -%}{% if not
              loop.last %},{% endif %}{%- endfor -%}]'
      - conditions:
        - condition: template
          value_template: '{{ trigger.topic == unselectedforegroundcolortopic and
            page_scroll }}'
        sequence:
        - service: mqtt.publish
          data:
            topic: '{{jsoncommandtopic}}'
            payload: '[{%- for p in range(1,12) %}"p[{{p}}].b[1].pco={{trigger.payload}}",{%-
              endfor -%} {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].pco2={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[2].pco={{trigger.payload}}"{%- endif -%},{%- endfor
              -%} {%- for p in range(1,12) %}"p[{{p}}].b[3].pco={{trigger.payload}}"{%
              if not loop.last %},{% endif %}{%- endfor -%}]'
      - conditions:
        - condition: template
          value_template: '{{ trigger.topic == unselectedbackgroundcolortopic and
            not page_scroll }}'
        sequence:
        - service: mqtt.publish
          data:
            topic: '{{jsoncommandtopic}}'
            payload: '[{%- for p in range(1,12) %}{%- if p == page1page|int %}"p[{{p}}].b[1].bco2={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[1].bco={{trigger.payload}}"{%- endif -%},{%- endfor
              -%} {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].bco2={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[2].bco={{trigger.payload}}"{%- endif -%},{%- endfor
              -%} {%- for p in range(1,12) %}{%- if p == page3page|int %}"p[{{p}}].b[3].bco2={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[3].bco={{trigger.payload}}"{%- endif -%}{% if not
              loop.last %},{% endif %}{%- endfor -%}]'
      - conditions:
        - condition: template
          value_template: '{{ trigger.topic == unselectedbackgroundcolortopic and
            page_scroll }}'
        sequence:
        - service: mqtt.publish
          data:
            topic: '{{jsoncommandtopic}}'
            payload: '[{%- for p in range(1,12) %}"p[{{p}}].b[1].bco={{trigger.payload}}",{%-
              endfor -%} {%- for p in range(1,12) %}{%- if p == page2page|int %}"p[{{p}}].b[2].bco2={{trigger.payload}}"{%-
              else -%}"p[{{p}}].b[2].bco={{trigger.payload}}"{%- endif -%},{%- endfor
              -%} {%- for p in range(1,12) %}"p[{{p}}].b[3].bco={{trigger.payload}}"{%
              if not loop.last %},{% endif %}{%- endfor -%}]'

substitutions:
  devicename: saloni
  upper_devicename: Saloni

esphome:
  name: $devicename
  comment: "Motion sensor for the living room" 

esp32:
  board: esp-wrover-kit
  framework:
    type: arduino

packages:
  wifi: !include common_substitutions/wifi.yaml
  device_base: !include common_substitutions/device_base.yaml

esp32_ble_tracker:

sensor:
  - platform: xiaomi_lywsd03mmc
    mac_address: "A4:C1:38:79:0E:2C"
    bindkey: "6308307e74406ef3e0a0f5a57a4e4ff3"
    temperature:
      name: "Saloni Temperature"
    humidity:
      name: "Saloni Humidity"
    battery_level:
      name: "Saloni Battery Level"

binary_sensor:
  - platform: gpio
    pin: 14
    name: "$upper_devicename PIR"
    device_class: motion
  # - platform: gpio
  #   id: test_button
  #   name: Test Button
  #   pin:
  #     number: GPIO13
  #     mode: INPUT_PULLUP
  #     inverted: true
  #   on_click:
  #     min_length: 600ms
  #     max_length: 2s
  #     then:
  #       - homeassistant.service:
  #           service: light.toggle
  #           data:
  #             entity_id: light.saloni
  #   on_double_click:
  #     min_length: 50ms
  #     max_length: 400ms
  #     then:
  #       - homeassistant.service:
  #           service: light.toggle
  #           data:
  #             entity_id: light.kouzina
  
remote_transmitter:
  pin: 
    number: GPIO2
    inverted : false
  carrier_duty_percent: 50%
  id: trsr

status_led:
  pin: GPIO2

api:
  services:
    - service: transmit_raw
      variables:
        code: int[]
      then:
        - remote_transmitter.transmit_raw:
            code: !lambda 'return code;'
            carrier_frequency: 38kHz
    - service: transmit_raw_repeat
      variables:
        code: int[]
        carrier_frequency: float
        repeat_times: int
        repeat_wait_time_us: int
      then:
        - remote_transmitter.transmit_raw:
            code: !lambda 'return code;'
            carrier_frequency: !lambda 'return carrier_frequency;'
            repeat:
              times: !lambda 'return repeat_times;'
              wait_time: !lambda 'return repeat_wait_time_us;'

esphome:
  name: $devicename
  platform: ESP8266
  board: esp_wroom_02
  includes: 
    - gree_ir.h
  libraries:
    - IRremoteESP8266

substitutions:
  devicename: bw-rc1
  upper_devicename: BW RC1

packages:
  wifi: !include common_substitutions/wifi.yaml
  device_base: !include common_substitutions/device_base.yaml

logger:
  logs:
    text_sensor: NONE
    sensor: NONE

status_led:
    pin: 
      number: GPIO4
      inverted : true

remote_receiver:
  pin: 
    number: GPIO5
    inverted : true
  dump: raw
  id: rcvr

    
remote_transmitter:
  pin: 
    number: GPIO14
    inverted : false
  carrier_duty_percent: 50%
  id: trsr
  
sensor:
  - platform: homeassistant
    name: "Temperature AC"
    entity_id: sensor.temperature_inside
    id: temp
    
binary_sensor: 
  - platform : gpio
    pin: 
      number: GPIO13
      inverted : true 
    name : "BW-RC1 Button" 
  # - platform: custom
  #   lambda: |-
  #     auto gree_binary_sensor = new GreeSensor();
  #     App.register_component(gree_binary_sensor);
  #     return {gree_binary_sensor};
  #   binary_sensors:
  #     name: "Bedroom AC light"

climate:
- platform: custom
  lambda: |-
    auto my_ac = new GreeAC();
    App.register_component(my_ac);
    return {my_ac};

  climates:
    - name: "My AC"
# climate:
#   - platform: climate_ir_lg
#     name: "Hall AC"
#     receiver_id: rcvr
#     transmitter_id: trsr
#     sensor: temp
    
# climate:
# - platform: custom
#   lambda: |-
#     auto bedroom_ac = new GreeAC();
#     App.register_component(bedroom_ac);
#     return {bedroom_ac};
#   climates:
#     - name: "Bedroom AC"
# switch:
#   - platform: template
#     name: "Power"
#     turn_on_action:
#       - remote_transmitter.transmit_raw:
#           code: [9039, -4425, 678, -1650, 652, -538, 652, -517, 673, -1649, 679, -1602, 699, -1623, 679, -1649, 652, -538, 652, -539, 652, -538, 652, -1650, 678, -1623, 678, -512, 678, -513, 678, -512, 678, -512, 679, -511, 679, -491, 699, -513, 677, -513, 678, -512, 678, -512, 678, -513, 678, -512, 679, -512, 682, -508, 678, -512, 679, -512, 678, -1602, 699, -515, 676, -1623, 678, -513, 677, -513, 678, -1623, 678, -512, 679]
#           carrier_frequency: 38kHz
# switch:
#   - platform: template
#     name: "Living Room TV"
#     id: living_room_tv
#     turn_on_action:
#       - remote_transmitter.transmit_lg:
#           data: 0x9E30000A
#           nbits: 32
#     turn_off_action:
#     - remote_transmitter.transmit_lg:
#         data: 0x8A10000A
#         nbits: 32
        
# api:
#   services:
#     - service: send_raw_command
#       variables:
#         command: int[]
#       then:
#         - remote_transmitter.transmit_raw:
#             code: !lambda 'return command;'
api:
  services:
    - service: transmit_nec
      variables:
        address: int
        command: int
      then:
        - remote_transmitter.transmit_nec:
            address: !lambda 'return address;'
            command: !lambda 'return command;'
    # I'm not sure how to use jinja {% if %} statements and return an int,
    # So instead I'm using an alternate method that accepts a string for command
    - service: transmit_nec_string
      variables:
        address: int
        command: string
      then:
        - remote_transmitter.transmit_nec:
            address: !lambda 'return address;'
            command: !lambda 'return (int)strtol(command.c_str(), NULL, 16);'
    - service: transmit_raw
      variables:
        code: int[]
      then:
        - remote_transmitter.transmit_raw:
            code: !lambda 'return code;'
            carrier_frequency: 38kHz
    - service: transmit_raw_repeat
      variables:
        code: int[]
        carrier_frequency: float
        repeat_times: int
        repeat_wait_time_us: int
      then:
        - remote_transmitter.transmit_raw:
            code: !lambda 'return code;'
            carrier_frequency: !lambda 'return carrier_frequency;'
            repeat:
              times: !lambda 'return repeat_times;'
              wait_time: !lambda 'return repeat_wait_time_us;'
    - service: transmit_lg
      variables:
        data: int
        nbits: int
      then:
        - remote_transmitter.transmit_lg:
            data: !lambda 'return data;'
            nbits: !lambda 'return nbits;'
    - service: send_raw_command
      variables:
        command: int[]
      then:
        - remote_transmitter.transmit_raw:
            code: !lambda 'return command;'
            carrier_frequency: 38kHz
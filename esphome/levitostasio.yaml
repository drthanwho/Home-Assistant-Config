substitutions:
  devicename: levitostasio
  upper_devicename: Levitostasio

esphome:
  name: $devicename
  platform: ESP32
  board: esp-wrover-kit

packages:
  wifi: !include common_substitutions/wifi.yaml
  device_base: !include common_substitutions/device_base.yaml
  
status_led:
  pin: GPIO2

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO25
      inverted: true
    name: Kaustiras
    filters:
      - delayed_on: 50ms
      - delayed_on: 200ms
  - platform: gpio
    pin:
      number: GPIO27
      inverted: true
    name: Petrleaio Makis
    filters:
      - delayed_on: 50ms
      - delayed_on: 200ms
  - platform: gpio
    pin:
      number: GPIO26
      inverted: true
    name: Petelaio Leonidas
    filters:
      - delayed_on: 50ms
      - delayed_on: 200ms
  - platform: gpio
    pin:
      number: GPIO14
      inverted: true
    name: Petrelaio Sofita
    filters:
      - delayed_on: 50ms
      - delayed_on: 200ms
# sensor:
#   - platform: ultrasonic
#     trigger_pin: GPIO1
#     echo_pin: GPIO3
#     name: "Water Tank Level"
#     unit_of_measurement: "%"
#     accuracy_decimals: 0
#     update_interval: 30min
#     filters:
#       - lambda: return ((((x*100)-20)-(123-20))/(123-20))*-100;
#       - filter_out: nan
#   - platform: dallas
#     address: 0x0F00000000F7EA28
#     name: "Temperature Water Heater"
    
  # - platform: ultrasonic
  #   trigger_pin: GPIO1
  #   echo_pin: GPIO3
  #   update_interval: 30min
  #   name: "Water Tank Volume"
  #   unit_of_measurement: "l"
  #   accuracy_decimals: 0
  #   filters:
  #     - lambda: return ((((x*100)-20)-(123-20))/(123-20))*-1000;
  #     - filter_out: nan

# Tank Depth = TD al the way from the cover where the sensor is mounted to the bottom
# Sensor Value = x this is will stay the same as this is the reading from the sensor
# Excluded Distance = EX which is the distance I have on top from the sensor which is mounted to the cover to the highest level the water can reach
#     return ((((x*100)-EX)-(TD-EX))/(TD-EX))*-100

# same for the Water Tank Equation but you have the Tank Capacity in Liters = TC as for mine I have a 1000 Liters tank.
#     return ((((x*100)-EX)-(TD-EX))/(TD-EX))*-TC

  # - platform: pulse_counter
  #   pin: GPIO14
  #   name: “Pulse Counter”
  #   update_interval: 5s
  #   id: water_pulse
  #   internal: true
  #   filters:
  #     lambda: |-
  #       static float total_pulses = 0.0;
  #       total_pulses += x * 1 / 60.0;
  #       id(lifetime_counter).publish_state(total_pulses / 27);
  #       return x ;
    
  # - platform: template
  #   id: lifetime_counter
  #   name: “Water Total”
  #   unit_of_measurement: L
  #   accuracy_decimals: 4

  # - platform: template
  #   id: water_flow_rate
  #   name: “Water Flow Rate”
  #   accuracy_decimals: 4
  #   icon: 'mdi:water'
  #   lambda: “return (id(water_pulse).state /27);”
  #   unit_of_measurement: L/min
  #   update_interval: 5s
# light:
  # - platform: rgb
  #   name: "Καυστήρας Status"
  #   id: heater_status
  #   red: output_red
  #   green: output_green
  #   blue: output_blue
  #   effects:
  #     # Customize parameters
  #     - random:
  #         name: "My Fast Random Effect"
  #         transition_length: 4s
  #         update_interval: 5s
  #     - pulse:
  #         name: "Fast Pulse"
  #         transition_length: 0.5s
  #         update_interval: 0.5s
  #     - pulse:
  #         name: "Slow Pulse"
  #         # transition_length: 1s      # defaults to 1s
  #         update_interval: 2s
  # - platform: monochromatic
  #   name: "Καυστήρας Σφάλμα"
  #   id: heating_fault_status
  #   output: output_component1
  #   effects:
  #     # Customize parameters
  #     - random:
  #         name: "My Fast Random Effect"
  #         transition_length: 4s
  #         update_interval: 5s
  #     - pulse:
  #         name: "Fast Pulse"
  #         transition_length: 0.5s
  #         update_interval: 0.5s
  #     - pulse:
  #         name: "Slow Pulse"
  #         # transition_length: 1s      # defaults to 1s
  #         update_interval: 2s

# output:
  # - platform: esp8266_pwm
  #   id: output_red
  #   pin: D5
  # - platform: esp8266_pwm
  #   id: output_green
  #   pin: D6
  # - platform: esp8266_pwm
  #   id: output_blue
  #   pin: D7
  #   max_power: 0%
  # - platform: esp8266_pwm
  #   id: output_component1
  #   pin: GPIO5
esphome:
  name: $devicename
  platform: ESP8266
  board: esp_wroom_02
  includes: 
    - gree_ir.h
  libraries:
    - IRremoteESP8266

substitutions:
  devicename: ac-bw-rc1
  upper_devicename: AC BW RC1

packages:
  wifi: !include common_substitutions/wifi.yaml
  device_base: !include common_substitutions/device_base.yaml

logger:
  logs:
    text_sensor: NONE
    sensor: NONE

status_led:
    pin: 
      number: GPIO4
      inverted : true

remote_receiver:
  pin: 
    number: GPIO5
    inverted : true
  dump: raw
  id: rcvr

    
remote_transmitter:
  pin: 
    number: GPIO14
    inverted : false
  carrier_duty_percent: 50%
  id: trsr
  
sensor:
  - platform: homeassistant
    name: "Temperature AC"
    entity_id: sensor.temperature_inside
    id: temp
    
binary_sensor: 
  - platform : gpio
    pin: 
      number: GPIO13
      inverted : true 
    name : "BW-RC1 Button" 

climate:
- platform: custom
  lambda: |-
    auto my_ac = new GreeAC();
    App.register_component(my_ac);
    return {my_ac};

  climates:
    - name: "My AC"

api:
  services:
    - service: transmit_raw
      variables:
        code: int[]
      then:
        - remote_transmitter.transmit_raw:
            code: !lambda 'return code;'
            carrier_frequency: 38kHz
    - service: transmit_raw_repeat
      variables:
        code: int[]
        carrier_frequency: float
        repeat_times: int
        repeat_wait_time_us: int
      then:
        - remote_transmitter.transmit_raw:
            code: !lambda 'return code;'
            carrier_frequency: !lambda 'return carrier_frequency;'
            repeat:
              times: !lambda 'return repeat_times;'
              wait_time: !lambda 'return repeat_wait_time_us;'
    - service: send_raw_command
      variables:
        command: int[]
      then:
        - remote_transmitter.transmit_raw:
            code: !lambda 'return command;'
            carrier_frequency: 38kHz